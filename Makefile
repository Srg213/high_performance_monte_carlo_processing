CC = g++
CFLAGS = -Iinclude -Wall -Wextra -std=c++11
SRC = src/main.cpp src/utils.cpp src/demo/vector_add.cpp
OBJ = $(SRC:.cpp=.o)
TARGET = monte_carlo

all: $(TARGET)

$(TARGET): $(OBJ)
	$(CC) -o $@ $^

%.o: %.cpp
	$(CC) $(CFLAGS) -c $< -o $@

clean:
	rm -f $(OBJ) $(TARGET)

run: all
	./$(TARGET) && rm -f $(OBJ) $(TARGET)



# CC: Specifies the compiler to use (g++).
# CFLAGS: Compiler flags, including:
# -Iinclude: Include directory for header files.
# -Wall: Enable all compiler's warning messages.
# -Wextra: Enable extra warning flags.
# -std=c++11: Use the C++11 standard.
# SRC: List of source files.
# OBJ: List of object files, generated by replacing .cpp with .o in SRC.
# TARGET: Name of the final executable.
# Targets and Rules:

# all: Default target that depends on the $(TARGET).
# $(TARGET): Links the object files ($(OBJ)) to create the executable. $@ represents the target name (monte_carlo), and $^ represents all the dependencies ($(OBJ)).
# %.o: %.cpp: Pattern rule to compile .cpp files into .o files. $< represents the source file, and $@ represents the target file.
# clean: Removes the object files and the executable.